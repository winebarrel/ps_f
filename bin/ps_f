#!/usr/bin/env ruby
ps_opts = (ARGV[0] || '').dup

if /\A-/ =~ ps_opts
  system("ps #{ARGV.join(' ')}")
  $stderr.puts('warning: BSD style only')
  exit($?.success? ? 0 : 1)
end

unless ps_opts.empty? or /f/ =~ ps_opts
  system("ps #{ARGV.join(' ')}")
  exit($?.success? ? 0 : 1)
end

ps_opts.gsub!('f', '') if /f/ =~ ps_opts
ps_opts << 'u' if (ps_opts.empty? or /u/ !~ ps_opts)
wide = ps_opts.scan('w').length

out = `ps #{ps_opts} -o ppid,command`
exit 1 unless $?.success?

lines = out.split(/\n/).map {|i| i.strip }

header_line = lines.shift
headers_border = (header_line =~ /PPID\s+COMMAND\Z/)

headers = header_line.split(/\s+/).values_at(0...-2)
additional_headers = header_line.split(/\s+/).values_at(-2..-1)

rows = {}
tree = []
pid_list = []

lines.each do |line|
  line_head = line[0, headers_border].strip.split(/\s+/, headers.length)
  pid = line_head[headers.index('PID')].to_i

  line_head.each_with_index do |value, i|
    rows[pid] ||= []
    rows[pid] << value unless ['COMMAND', 'CMD'].include?(headers[i])
  end

  tail_headers_border = headers_border
  tail_headers_border -= 1 until ' ' == line[tail_headers_border - 1, 1]

  ppid, command = line[tail_headers_border..-1].strip.split(/\s+/, additional_headers.length)
  tree << [pid, ppid.to_i, command]
  pid_list << pid
end

roots = tree.select {|pid, ppid, command| not pid_list.include?(ppid) }

def asm(tree, roots, pre_prefix, cmd_list, basename_only)
  h = {}

  roots.each do |pid, ppid, command|
    h[ppid] ||= []
    h[ppid] << [pid, command]
  end

  h.sort_by {|a, b| a }.each do |ppid, list|
    list.sort_by {|a, b| a[0] }.each_with_index do |pid_cmd, i|
      pid, command = pid_cmd

      if basename_only and %r|\A/| =~ command
        path_list = command.split(' ')
        rest = []

        until File.exist?(path_list.join(' ')) or path_list.empty?
          rest << path_list.pop
        end

        command = File.basename(path_list.join(' '))
        command << (' ' + rest.join(' ')) unless rest.empty?
      end

      cmd_list << [pid, pre_prefix + ' \_ '  + command]

      children = tree.select {|child| pid == child[1] }
      child_pre_prefix = pre_prefix + ((i < list.length - 1) ? ' |  ' : '    ')

      asm(tree, children, child_pre_prefix, cmd_list, basename_only)
    end
  end
end

cmd_list = []
asm(tree, roots, '', cmd_list, wide < 2)

tree_rows = cmd_list.map do |pid, command|
  row = rows[pid]
  row + [command[4..-1]]
end

header_row = headers.select {|i| i != 'COMMAND' } + ['COMMAND']
tree_rows.unshift(header_row)

collen_list = []

tree_rows.each do |row|
  row.each_with_index do |col, i|
    len = collen_list[i] || 0
    collen_list[i] = col.length if col.length > len
  end
end

tree_lines = []

tree_rows.each do |row|
  fmt_list = []

  row.each_with_index do |value, i|
    fmt_list << (/\A[.:\d]+(AM|PM)?\Z/ =~ value ? '%*s' : '%-*s')
  end

  format = fmt_list.join(' ')
  values = collen_list.zip(row).flatten

  tree_lines << (format % values).sub(/\s+\Z/, '')
end

max_cols = 0

if wide.zero? and $stdout.tty?
  max_cols = `stty size cols 2> /dev/null`.strip.sub(/\A.*\s+/, '').to_i
end

tree_lines.each do |line|
  line = line[0, max_cols] unless max_cols.zero?
  puts line
end
